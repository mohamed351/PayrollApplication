//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PayrollApplication.OurModel
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class CompanyEntities : DbContext
    {
        public CompanyEntities()
            : base("name=CompanyEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AddSalary> AddSalaries { get; set; }
        public virtual DbSet<AttendanceDay> AttendanceDays { get; set; }
        public virtual DbSet<AttendanceDays_Employees> AttendanceDays_Employees { get; set; }
        public virtual DbSet<Bank> Banks { get; set; }
        public virtual DbSet<Bank_Informations> Bank_Informations { get; set; }
        public virtual DbSet<Department> Departments { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<Have_Login_Program> Have_Login_Program { get; set; }
        public virtual DbSet<JobTitle> JobTitles { get; set; }
        public virtual DbSet<SalaryInfomation_AddSalary> SalaryInfomation_AddSalary { get; set; }
        public virtual DbSet<SalaryInformation> SalaryInformations { get; set; }
        public virtual DbSet<SalaryInformation_SubTrack> SalaryInformation_SubTrack { get; set; }
        public virtual DbSet<SalaryTaxInformation> SalaryTaxInformations { get; set; }
        public virtual DbSet<Sanctions_List> Sanctions_List { get; set; }
        public virtual DbSet<SubTractSalary> SubTractSalaries { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
    
        public virtual ObjectResult<Sp_Employee_Attend_Result> Sp_Employee_Attend(Nullable<int> atdID)
        {
            var atdIDParameter = atdID.HasValue ?
                new ObjectParameter("AtdID", atdID) :
                new ObjectParameter("AtdID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_Employee_Attend_Result>("Sp_Employee_Attend", atdIDParameter);
        }
    
        public virtual int fn_AttendTimeProccess()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("fn_AttendTimeProccess");
        }
    
        public virtual int sp_AddDepartment(string departmentName, string description)
        {
            var departmentNameParameter = departmentName != null ?
                new ObjectParameter("DepartmentName", departmentName) :
                new ObjectParameter("DepartmentName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AddDepartment", departmentNameParameter, descriptionParameter);
        }
    
        public virtual int sp_AddSanction(string sanctionName, string sanctionDescription)
        {
            var sanctionNameParameter = sanctionName != null ?
                new ObjectParameter("SanctionName", sanctionName) :
                new ObjectParameter("SanctionName", typeof(string));
    
            var sanctionDescriptionParameter = sanctionDescription != null ?
                new ObjectParameter("SanctionDescription", sanctionDescription) :
                new ObjectParameter("SanctionDescription", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AddSanction", sanctionNameParameter, sanctionDescriptionParameter);
        }
    
        public virtual int sp_AttendEmployee(Nullable<int> employeesID)
        {
            var employeesIDParameter = employeesID.HasValue ?
                new ObjectParameter("EmployeesID", employeesID) :
                new ObjectParameter("EmployeesID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AttendEmployee", employeesIDParameter);
        }
    
        public virtual int sp_Delete_Login(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Delete_Login", iDParameter);
        }
    
        public virtual int sp_Delete_Sanctions(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Delete_Sanctions", iDParameter);
        }
    
        public virtual int sp_EditDepartment(Nullable<int> iD, string departmentName, string description)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var departmentNameParameter = departmentName != null ?
                new ObjectParameter("DepartmentName", departmentName) :
                new ObjectParameter("DepartmentName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_EditDepartment", iDParameter, departmentNameParameter, descriptionParameter);
        }
    
        public virtual int sp_EditEmployees(Nullable<int> iD, string name, Nullable<decimal> salary, Nullable<System.DateTime> hireDate, Nullable<System.DateTime> dateOFBith, byte[] picture, string marital_status, string geneder, string username, string password, Nullable<int> jobID, Nullable<int> departmentNumber)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var salaryParameter = salary.HasValue ?
                new ObjectParameter("Salary", salary) :
                new ObjectParameter("Salary", typeof(decimal));
    
            var hireDateParameter = hireDate.HasValue ?
                new ObjectParameter("HireDate", hireDate) :
                new ObjectParameter("HireDate", typeof(System.DateTime));
    
            var dateOFBithParameter = dateOFBith.HasValue ?
                new ObjectParameter("DateOFBith", dateOFBith) :
                new ObjectParameter("DateOFBith", typeof(System.DateTime));
    
            var pictureParameter = picture != null ?
                new ObjectParameter("picture", picture) :
                new ObjectParameter("picture", typeof(byte[]));
    
            var marital_statusParameter = marital_status != null ?
                new ObjectParameter("Marital_status", marital_status) :
                new ObjectParameter("Marital_status", typeof(string));
    
            var genederParameter = geneder != null ?
                new ObjectParameter("Geneder", geneder) :
                new ObjectParameter("Geneder", typeof(string));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var jobIDParameter = jobID.HasValue ?
                new ObjectParameter("JobID", jobID) :
                new ObjectParameter("JobID", typeof(int));
    
            var departmentNumberParameter = departmentNumber.HasValue ?
                new ObjectParameter("DepartmentNumber", departmentNumber) :
                new ObjectParameter("DepartmentNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_EditEmployees", iDParameter, nameParameter, salaryParameter, hireDateParameter, dateOFBithParameter, pictureParameter, marital_statusParameter, genederParameter, usernameParameter, passwordParameter, jobIDParameter, departmentNumberParameter);
        }
    
        public virtual int sp_EditSanction(Nullable<int> sanctionID, string sanctionName, string sanctionDescription)
        {
            var sanctionIDParameter = sanctionID.HasValue ?
                new ObjectParameter("SanctionID", sanctionID) :
                new ObjectParameter("SanctionID", typeof(int));
    
            var sanctionNameParameter = sanctionName != null ?
                new ObjectParameter("SanctionName", sanctionName) :
                new ObjectParameter("SanctionName", typeof(string));
    
            var sanctionDescriptionParameter = sanctionDescription != null ?
                new ObjectParameter("SanctionDescription", sanctionDescription) :
                new ObjectParameter("SanctionDescription", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_EditSanction", sanctionIDParameter, sanctionNameParameter, sanctionDescriptionParameter);
        }
    
        public virtual int sp_EmployeesAttend(Nullable<int> employeesID)
        {
            var employeesIDParameter = employeesID.HasValue ?
                new ObjectParameter("EmployeesID", employeesID) :
                new ObjectParameter("EmployeesID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_EmployeesAttend", employeesIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_EmployeesLeave(Nullable<int> employeesID)
        {
            var employeesIDParameter = employeesID.HasValue ?
                new ObjectParameter("EmployeesID", employeesID) :
                new ObjectParameter("EmployeesID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_EmployeesLeave", employeesIDParameter);
        }
    
        public virtual int sp_FlagDepartment(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_FlagDepartment", iDParameter);
        }
    
        public virtual ObjectResult<sp_GetAttendance_Result> sp_GetAttendance(string year, string month, string day)
        {
            var yearParameter = year != null ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(string));
    
            var monthParameter = month != null ?
                new ObjectParameter("month", month) :
                new ObjectParameter("month", typeof(string));
    
            var dayParameter = day != null ?
                new ObjectParameter("Day", day) :
                new ObjectParameter("Day", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetAttendance_Result>("sp_GetAttendance", yearParameter, monthParameter, dayParameter);
        }
    
        public virtual int sp_InsertEmployees(string name, Nullable<decimal> salary, Nullable<System.DateTime> hireDate, Nullable<System.DateTime> dateOFBith, byte[] picture, string marital_status, string geneder, string username, string password, Nullable<int> jobID, Nullable<int> departmentNumber)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var salaryParameter = salary.HasValue ?
                new ObjectParameter("Salary", salary) :
                new ObjectParameter("Salary", typeof(decimal));
    
            var hireDateParameter = hireDate.HasValue ?
                new ObjectParameter("HireDate", hireDate) :
                new ObjectParameter("HireDate", typeof(System.DateTime));
    
            var dateOFBithParameter = dateOFBith.HasValue ?
                new ObjectParameter("DateOFBith", dateOFBith) :
                new ObjectParameter("DateOFBith", typeof(System.DateTime));
    
            var pictureParameter = picture != null ?
                new ObjectParameter("picture", picture) :
                new ObjectParameter("picture", typeof(byte[]));
    
            var marital_statusParameter = marital_status != null ?
                new ObjectParameter("Marital_status", marital_status) :
                new ObjectParameter("Marital_status", typeof(string));
    
            var genederParameter = geneder != null ?
                new ObjectParameter("Geneder", geneder) :
                new ObjectParameter("Geneder", typeof(string));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var jobIDParameter = jobID.HasValue ?
                new ObjectParameter("JobID", jobID) :
                new ObjectParameter("JobID", typeof(int));
    
            var departmentNumberParameter = departmentNumber.HasValue ?
                new ObjectParameter("DepartmentNumber", departmentNumber) :
                new ObjectParameter("DepartmentNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertEmployees", nameParameter, salaryParameter, hireDateParameter, dateOFBithParameter, pictureParameter, marital_statusParameter, genederParameter, usernameParameter, passwordParameter, jobIDParameter, departmentNumberParameter);
        }
    
        public virtual int sp_Insert_Have_Login_Program(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Insert_Have_Login_Program", iDParameter);
        }
    
        public virtual int sp_Insert_Login(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Insert_Login", iDParameter);
        }
    
        public virtual ObjectResult<sp_Login_Employees_Result> sp_Login_Employees(string username, string password)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Login_Employees_Result>("sp_Login_Employees", usernameParameter, passwordParameter);
        }
    
        public virtual ObjectResult<sp_SelectDepartment_Result> sp_SelectDepartment()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SelectDepartment_Result>("sp_SelectDepartment");
        }
    
        public virtual ObjectResult<sp_SelectJobTitle_Result> sp_SelectJobTitle()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SelectJobTitle_Result>("sp_SelectJobTitle");
        }
    
        public virtual ObjectResult<sp_Select_Employees_Result> sp_Select_Employees()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Select_Employees_Result>("sp_Select_Employees");
        }
    
        public virtual ObjectResult<sp_Select_Employees1_Result> sp_Select_Employees1()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Select_Employees1_Result>("sp_Select_Employees1");
        }
    
        public virtual ObjectResult<sp_Select_Employees_HaveLogin_Result> sp_Select_Employees_HaveLogin()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Select_Employees_HaveLogin_Result>("sp_Select_Employees_HaveLogin");
        }
    
        public virtual ObjectResult<sp_Select_Sanction_Result> sp_Select_Sanction()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Select_Sanction_Result>("sp_Select_Sanction");
        }
    
        public virtual int sp_UnFlagDepartment(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UnFlagDepartment", iDParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_deleteAddSalary(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_deleteAddSalary", iDParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual ObjectResult<sp_select_Department_and_Manager_Result> sp_select_Department_and_Manager()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_select_Department_and_Manager_Result>("sp_select_Department_and_Manager");
        }
    
        public virtual ObjectResult<sp_select_Login_Employees_Result> sp_select_Login_Employees()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_select_Login_Employees_Result>("sp_select_Login_Employees");
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int sp_AddMonthSalary(Nullable<int> empID, Nullable<int> bankID, Nullable<decimal> salary, Nullable<decimal> allSalary, string accountName, Nullable<decimal> insurance, Nullable<decimal> taxValue, Nullable<int> taxID)
        {
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(int));
    
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            var salaryParameter = salary.HasValue ?
                new ObjectParameter("Salary", salary) :
                new ObjectParameter("Salary", typeof(decimal));
    
            var allSalaryParameter = allSalary.HasValue ?
                new ObjectParameter("AllSalary", allSalary) :
                new ObjectParameter("AllSalary", typeof(decimal));
    
            var accountNameParameter = accountName != null ?
                new ObjectParameter("AccountName", accountName) :
                new ObjectParameter("AccountName", typeof(string));
    
            var insuranceParameter = insurance.HasValue ?
                new ObjectParameter("Insurance", insurance) :
                new ObjectParameter("Insurance", typeof(decimal));
    
            var taxValueParameter = taxValue.HasValue ?
                new ObjectParameter("TaxValue", taxValue) :
                new ObjectParameter("TaxValue", typeof(decimal));
    
            var taxIDParameter = taxID.HasValue ?
                new ObjectParameter("TaxID", taxID) :
                new ObjectParameter("TaxID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AddMonthSalary", empIDParameter, bankIDParameter, salaryParameter, allSalaryParameter, accountNameParameter, insuranceParameter, taxValueParameter, taxIDParameter);
        }
    
        public virtual ObjectResult<sp_IFEmployeesGetSalary_Result> sp_IFEmployeesGetSalary(Nullable<int> empID, Nullable<int> bankID)
        {
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(int));
    
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_IFEmployeesGetSalary_Result>("sp_IFEmployeesGetSalary", empIDParameter, bankIDParameter);
        }
    
        [DbFunction("CompanyEntities", "AddSalaryBank")]
        public virtual IQueryable<AddSalaryBank_Result> AddSalaryBank(Nullable<int> empID, Nullable<int> bankID)
        {
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(int));
    
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<AddSalaryBank_Result>("[CompanyEntities].[AddSalaryBank](@EmpID, @BankID)", empIDParameter, bankIDParameter);
        }
    
        public virtual ObjectResult<IFTakedSalay_Result> IFTakedSalay(Nullable<int> bankID, Nullable<int> empID)
        {
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<IFTakedSalay_Result>("IFTakedSalay", bankIDParameter, empIDParameter);
        }
    
        public virtual ObjectResult<Sp_SelectSalary_Result> Sp_SelectSalary(Nullable<int> empID, Nullable<int> salayInformationID)
        {
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(int));
    
            var salayInformationIDParameter = salayInformationID.HasValue ?
                new ObjectParameter("SalayInformationID", salayInformationID) :
                new ObjectParameter("SalayInformationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_SelectSalary_Result>("Sp_SelectSalary", empIDParameter, salayInformationIDParameter);
        }
    
        public virtual ObjectResult<Sp_SelectSalary_BankID_Result> Sp_SelectSalary_BankID(Nullable<int> empID, Nullable<int> bankID)
        {
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(int));
    
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_SelectSalary_BankID_Result>("Sp_SelectSalary_BankID", empIDParameter, bankIDParameter);
        }
    
        [DbFunction("CompanyEntities", "SubSalaryBank")]
        public virtual IQueryable<SubSalaryBank_Result> SubSalaryBank(Nullable<int> empID, Nullable<int> bankID)
        {
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(int));
    
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<SubSalaryBank_Result>("[CompanyEntities].[SubSalaryBank](@EmpID, @BankID)", empIDParameter, bankIDParameter);
        }
    
        [DbFunction("CompanyEntities", "fn_AddSalary")]
        public virtual IQueryable<fn_AddSalary_Result> fn_AddSalary(Nullable<int> empID, Nullable<int> salaryinfoID)
        {
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("empID", empID) :
                new ObjectParameter("empID", typeof(int));
    
            var salaryinfoIDParameter = salaryinfoID.HasValue ?
                new ObjectParameter("salaryinfoID", salaryinfoID) :
                new ObjectParameter("salaryinfoID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_AddSalary_Result>("[CompanyEntities].[fn_AddSalary](@empID, @salaryinfoID)", empIDParameter, salaryinfoIDParameter);
        }
    
        [DbFunction("CompanyEntities", "fn_SubTractSalary")]
        public virtual IQueryable<fn_SubTractSalary_Result> fn_SubTractSalary(Nullable<int> empID, Nullable<int> salaryinfoID)
        {
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("empID", empID) :
                new ObjectParameter("empID", typeof(int));
    
            var salaryinfoIDParameter = salaryinfoID.HasValue ?
                new ObjectParameter("salaryinfoID", salaryinfoID) :
                new ObjectParameter("salaryinfoID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_SubTractSalary_Result>("[CompanyEntities].[fn_SubTractSalary](@empID, @salaryinfoID)", empIDParameter, salaryinfoIDParameter);
        }
    
        [DbFunction("CompanyEntities", "fn_groupby_TotalAddSalary")]
        public virtual IQueryable<fn_groupby_TotalAddSalary_Result> fn_groupby_TotalAddSalary()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_groupby_TotalAddSalary_Result>("[CompanyEntities].[fn_groupby_TotalAddSalary]()");
        }
    
        [DbFunction("CompanyEntities", "fn_groupby_TotalSubTrackSalary")]
        public virtual IQueryable<fn_groupby_TotalSubTrackSalary_Result> fn_groupby_TotalSubTrackSalary()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_groupby_TotalSubTrackSalary_Result>("[CompanyEntities].[fn_groupby_TotalSubTrackSalary]()");
        }
    
        public virtual ObjectResult<sp_SelectAddSalayInfo_Result> sp_SelectAddSalayInfo(Nullable<int> empID, Nullable<int> bankID)
        {
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(int));
    
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SelectAddSalayInfo_Result>("sp_SelectAddSalayInfo", empIDParameter, bankIDParameter);
        }
    
        public virtual ObjectResult<sp_Select_DepartmentSalaryReport_Result> sp_Select_DepartmentSalaryReport(Nullable<int> bankID)
        {
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Select_DepartmentSalaryReport_Result>("sp_Select_DepartmentSalaryReport", bankIDParameter);
        }
    }
}
